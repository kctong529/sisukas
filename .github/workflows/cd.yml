name: CD Pipeline

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: 
      - "Send Newsletter"
      - "Check Course Updates"
    types:
      - completed

env:
  WORKING_DIR: course-browser
  PRODUCTION_URL: https://sisukas.fly.dev/
  NODE_VERSION: '18'

jobs:
  determine-deployment:
    name: Deployment needed
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ env.DEPLOY == 'true' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Always checkout main branch for workflow_run events
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.sha }}

      - name: Check direct push
        id: direct_push
        if: github.event_name == 'push'
        run: |
          echo "Direct push to main - deploying"
          echo "DEPLOY=true" >> $GITHUB_ENV

      - name: Check workflow_run trigger
        id: workflow_run_check
        if: github.event_name == 'workflow_run'
        run: |
          echo "Workflow run event detected"
          echo "Triggering workflow: ${{ github.event.workflow_run.name }}"

          # Fetch the latest changes from origin
          git fetch origin main

          # Get the latest commit info
          COMMIT_AUTHOR="$(git log -1 --pretty=format:'%an')"
          COMMIT_MESSAGE="$(git log -1 --pretty=%B)"
          
          echo "Latest commit by: $COMMIT_AUTHOR"
          echo "Message: $COMMIT_MESSAGE"
          
          # Check if latest commit was made by github-actions and matches our patterns
          if [[ "$COMMIT_AUTHOR" == "github-actions[bot]" && "$COMMIT_MESSAGE" == *"Update Week"* && "$COMMIT_MESSAGE" == *"newsletter"* ]]; then
            echo "Newsletter update by github-actions detected - deploying"
            echo "DEPLOY=true" >> $GITHUB_ENV
          elif [[ "$COMMIT_AUTHOR" == "github-actions[bot]" && "$COMMIT_MESSAGE" == "Update course database:"* ]]; then
            echo "Course database update by github-actions detected - deploying"
            echo "DEPLOY=true" >> $GITHUB_ENV
          else
            echo "No deployment trigger found"
            echo "DEPLOY=false" >> $GITHUB_ENV
          fi
          
  build:
    name: Build Application
    needs: determine-deployment
    if: needs.determine-deployment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      build-complete: ${{ steps.build.outputs.result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build with Vite
        id: build
        working-directory: ${{ env.WORKING_DIR }}
        env:
          VITE_FILTERS_API: https://filters-api.sisukas.eu
          VITE_WRAPPER_API: https://sisu-wrapper-api.sisukas.eu
        run: |
          npm run build
          echo "result=success" >> $GITHUB_OUTPUT

      - name: List Files
        working-directory: ${{ env.WORKING_DIR }}
        run: ls -la

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIR }}/dist/

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    environment: 
      name: production
      url: ${{ env.PRODUCTION_URL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIR }}/dist/

      - name: List Files
        working-directory: ${{ env.WORKING_DIR }}
        run: ls -la

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ env.PRODUCTION_URL }}
          environment: production

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy on Fly.io
        working-directory: ${{ env.WORKING_DIR }}
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ env.PRODUCTION_URL }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ env.PRODUCTION_URL }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
